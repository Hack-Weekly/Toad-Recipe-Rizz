// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model AuthUser {
  id           String        @id
  email String @unique
  username     String
  auth_session AuthSession[]
  auth_key     AuthKey[]
  picture String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Profile   	Profile[]
  Recipe    	Recipe[]
  User_Category User_Category[]
  @@map("auth_user")
  @@unique([id, username])
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade, onUpdate: Cascade)
  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String @unique
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade, onUpdate: Cascade)
  @@index([user_id])
  @@map("auth_key")
}

model Profile {
  id         String     @id @default(cuid())
  user_id    String
  name       String
  slug       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user      AuthUser @relation(references: [id, username], fields: [user_id, slug], onDelete: Cascade, onUpdate: Cascade)
  @@index([user_id, slug])
}

model Recipe {
  // Added an automatically generated id
  id String @id @default(cuid())
  user_id String
  name            String
  slug            String @unique
  description     String @db.Text
  ingredients     Json
  instructions    Json
  cook_time       String
  picture         String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  user            AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade, onUpdate: Cascade)
  Recipe_Category Recipe_Category[]
  @@index([user_id])
}

model User_Category {
  id          String      @id @default(cuid())
  user_id     String
  category_id Int
  user        AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade, onUpdate: Cascade)
  category    Category @relation(fields: [category_id], references: [category_id])
  @@index([user_id])
  @@index([category_id])
}

model Category {
  id              String               @id @default(cuid())
  category_id     Int @unique 
  name            String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  User_Category   User_Category[]
  Recipe_Category Recipe_Category[]

  @@index([category_id])
}

model Recipe_Category {
  id          String      @id @default(cuid())
  recipe_id   String
  category_id Int @unique
  recipe      Recipe   @relation(references: [id], fields: [recipe_id])
  category    Category @relation(fields: [category_id], references: [category_id])

  @@index([recipe_id])
  @@index([category_id])
}
